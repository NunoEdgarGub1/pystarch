Inference has to be merged into the main tree walking because
we will need to keep track of the types of local variables in order to
do the inference:

def f(x):
    a = 'string'
    return a + x

Here, we need to know that 'a' is a string in order to infer that x is
also a string.

Idea: The simple "type" of a symbol is the most specific type we can determine
at the time of the symbol's creation. But we also store an "inferred_type" that
is progressively restricted as the symbol is used in expressions. The
inferred_type starts out as Unknown, and we take the intersection each time
it is used. If the intersection is null, then we can generate a warning.

Basically we just have to change all our type checking logic in main.py to
use this technique rather than the inline warnings that we currently use.

Then at the end of a FunctionDef, we scan the scope for the symbols of the
function arguments and save the inferred types as the function arguments.


The required type has to be passed down the tree. For example:

len(2 * x)

If you only saw "2 * x", you wouldn't know if x is a number or a string, but
because it is the parameter to the "len" function, you know the result must
be a string, list, set, or tuple, so we should be able to cross number off the
list of possibilities. And this expression may be buried inside another
expression, so it is not a simple matter to keep track of what the type of
each part should be.

NOTE: in the grammar, function arguments ONLY appear in expressions.
Though we do need to pass in information from other grammatical structures
about what the expected type of the expression is. For example, the expression
for the conditional of an "if" statement should be a boolean.

So we need a module that takes an expression, a context, and a required result
type. It then returns the inferred types of all the names in the expression.


LOOPING OR NETWORK PROPAGATION
==============================
c = a + b
d = c - 1
We should be able to deduce that a and b are Num (not Str) from this. The
problem is that information has to propagate backwards in order to determine
this. So we could either propagate the information through a network of
constraints or just keep the one-way processing, but loop over the same block
until the constraints remain unchanged. I think the looping method is simpler.


* Actually, I think we may have to do the network propagation method because
it would be wierd if on the second loop "c" already has a type even though
it is just being assigned for the first time. Then we don't know if this is
a re-assignment, and we can't really tell if "a+b" should have the same type
as this preset for "c".
