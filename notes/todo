
High Priority
=============
Don't visit unreachable code
When clonining visitor, have to clone context too
Negative slice indices, slice step size (for tuple type evaluation)
Make an HTML debugging display just like pysonar
EqualityMixin: other.__class__ == self.__class__
Unwrap maybe in comprehensions with "if x is not None" conditions
Use a code coverage tool to make sure everything is covered by tests
Support calling functions that are defined later (needed for mutual recursion)
Improve function call argument error checking
Improve constraint checking (back-propagation, see 'maybe' test case)
- Maybe each symbol can contain a list of "linked expressions" where it is
assumed that the linked expressions have the same type, so if we constrain
an intermediate variable, it will automatically recursively constrain all the
linked expressions. This might enter an infinite loop though. Maybe we could
avoid infinite loops as long as we avoid recurring when the constraint does
not cause any tightening.
from a.b import module
Handle circular imports properly

Medium Priority
===============
Check that all assigned symbols are used at least once
Check that function return values are not discarded

Low Priority
============
Split Num into Int and Float
Implement visit_Delete and actually remove items from scope
Optimize function return type evaluation when return type can be determined
    while processing the definition
Warn when function is never called if it starts with an underscore
Automatically add type annotations to function definitions

Limitations
===========
Custom operator overloading with things like __getitem__ or __add__ don't work
Tuple indices must be literal numbers
    - could cheat if all types in the tuple are the same
