
High Priority
=============
Visit function body in visit_Call
Fix Compare: in, not in
Fix BinOp in main.py: allow multiplication of string with integer,
    addition of strings, lists, tuples

Add types of builtins to initial scope
Make sure types are consistent inside of explicit list, set, dict definitions
Support calling functions that are defined later (needed for mutual recursion)

Imports
=======
Support import from and aliases
Support heirarchical module names in import

Classes
=======
Handle attribute assignment
Handle attribute assignment when it is one item of a tuple assignment
Process self.x into object namespace
- When you reach a FunctionDef for __init__
    set first param to type "Object[<Class>]"
    need some way to know which Class we are in
- When you reach an assignment for an attribute
    if you are in an __init__ body and the left side is the first arg
    then allow subnamespace assignment without warnings
- After processing FunctionDef for __init__
    look for the symbol for "self" (whatever the first parameter is)
    and copy its subnamespace to the current namespace (along with __init__)
- In the ClassDef, after processing the class namespace,
    add two types: "Object[<Class>]" with subnamespace equal to
    the namespace from the ClassDef and a function "<Class>" with
    return type "Object[<Class>]" and arguments from the __init__ function
Check that __init__ takes at least one argument

Low Priority
============
Implement visit_Delete and actually remove items from scope
Cache results of imports for speed
Optimize function return type evaluation when return type can be determined
    while processing the definition

Maybe Never
===========
Custom operator overloading with things like __getitem__ or __add__ don't work
