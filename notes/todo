http://docs.python.org/2/library/compiler.html

High Priority
=============
Visit function body in visit_Call
Fix slice: can mean indexing into list

Support import from and aliases
Fix BinOp: allow multiplication of string with integer,
    addition of strings, lists, tuples
Support heirarchical module names in import
Fix Compare: in, not in
Check that __init__ takes at least one argument
Make sure types are consistent inside of explicit list, set, dict definitions

Add types of builtins to initial scope
Support calling functions that are defined later (needed for mutual recursion)


Classes
=======
Handle attribute assignment
Handle attribute assignment when it is one item of a tuple assignment
Process self.x into object namespace
- When you reach a FunctionDef for __init__
    set first param to type "Object[<Class>]"
    need some way to know which Class we are in
- When you reach an assignment for an attribute
    if you are in an __init__ body and the left side is the first arg
    then allow subnamespace assignment without warnings
- After processing FunctionDef for __init__
    look for the symbol for "self" (whatever the first parameter is)
    and copy its subnamespace to the current namespace (along with __init__)
- In the ClassDef, after processing the class namespace,
    add two types: "Object[<Class>]" with subnamespace equal to
    the namespace from the ClassDef and a function "<Class>" with
    return type "Object[<Class>]" and arguments from the __init__ function

Return Types
============
A lot of functions in Python have return types that depend on the arguments.
Therefore, at least for some functions, we will have to determine the return
type when we encounter the call rather than the definition. The way we can
do this is by checking if the computed return type based on the definition
contains an Any() type anywhere inside it. If it does, then we save the
function's code into the return_type attribute of the function's type. That
way, even if the function is passed around as a symbol, we can still easily
access the code to process it with new arguments to figure out what the
types should be. Actually, I don't think this is going to work the way I am
thinking. A function like getattr can take a string and that string may not
be determinable at compile-time, so the return type is compile-time
indeterminate. Therefore, we will just have to say that getattr returns
anytype. We can still do template types though. When processing a function
definition, we replace any parameters that are anytype with a unique
type object like Any(1), Any(2), etc. Then the return type will contain these
placeholders that we can evaluate at call time. We may have to ban getattr.

I think for a lot of the builtin functions, they should be treated much like
how we are treating expressions now. For example, if we use the list()
function to convert a tuple to a list, we should be able to extract the type
of the first element of the tuple to get the assumed element type of the list.

Low Priority
============
Implement visit_Delete and actually remove items from scope
Cache results of imports for speed
