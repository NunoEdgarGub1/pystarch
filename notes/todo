
NEXT: infer type of function arguments based on usage


Store computed type of every function call, and every function argument,
so each function has a list for it's type and lists for each argument.

We probably have to use union types for more power.

When evaluating a function, we should be able to add constraints to any
variable and detect if the contraints are violated. For example:

def f(a, b):
    return a + b

We should be able to tag 'a' and 'b' as being either number or string since
these are the only types that can work here. "Usage constraints" can be
calculated before ever calling the function.


High Priority
=============
Call class methods properly (set 'self' parameter to instance)
Negative slice indices, slice step size (for tuple type evaluation)
Make an HTML debugging display just like pysonar
- Need to evaluate function defs somehow
EqualityMixin: other.__class__ == self.__class__
Unwrap maybe in comprehensions with "if x is not None" conditions
Use a code coverage tool to make sure everything is covered by tests
Support calling functions that are defined later (needed for mutual recursion)
Check that __init__ takes at least one argument

Imports
=======
from a.b import module
Handle circular imports properly

Medium Priority
===============
Check that all assigned symbols are used at least once
Check that function return values are not discarded

Low Priority
============
Split Num into Int and Float
Implement visit_Delete and actually remove items from scope
Optimize function return type evaluation when return type can be determined
    while processing the definition
Warn when function is never called if it starts with an underscore
Automatically add type annotations to function definitions

Limitations
===========
Custom operator overloading with things like __getitem__ or __add__ don't work
Tuple indices must be literal numbers
    - could cheat if all types in the tuple are the same
